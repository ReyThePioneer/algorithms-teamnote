# 피보나치 수열 (재귀)
# 시간 복잡도 : O(2^N) - 트리 구조를 확인해보면 f(2)가 여러 번 호출됨
# f(30)을 계산하려면 약 10억 가량의 연산을 수행해야 함

def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)

print(fibo(4)) # 1, 1, 2, 3

# 피보나치 수열
# DP 조건 확인
# 1) 최적 부분 구조 : 큰 문제를 작은 문제로 나눌 수 있음 (분할 정복과 공통점)
# 2) 중복되는 부분 문제 : 동일한 작은 문제를 반복적으로 해결 (분할 정복과의 차이점)

# 하향식 Top-down (Memoization)
# 한 번 계산한 결과를 메모리 공간에 메모하는 기법 (=Caching)
# 한 번 계산된 결과를 담아놓기만 하고 DP를 위해 활용하지 않을 수도 있음

# 상향식 Bottom-up (반복문)
# DP의 전형적인 형태
# 결과 저장용 리스트 : DP table이라고 부름 (파이썬에서는 리스트)

# 피보나치 수열 (Top-down DP - 재귀 함수)
# 한 번 계산된 결과를 메모이제이션 하기 위한 리스트 초기화
d = [0] * 100

def fibo(x):
    # 종료 조건(1 또는 2일 때 1을 반환)
    print('f(' + str(x) + ')', end=' ')
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라 피보나치 결과 반환
    d[x] = fibo(x - 1) + fibo(x - 2)
    # 최종적으로 dp table의 x번째 값 반환
    return d[x]

print(fibo(6))

# 피보나치 수열 (Bottom-up DP - 반복문)
# 앞서 계산된 결과를 저장하기 위한 DP table 초기화
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수 반복문으로 구현
for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]

print(d[n])