# < 문자열 자료형 >

# 따옴표 사용
data = 'Hello World'
print(data)

data = "Don't you know \"Python\"?"
print(data)

# 문자열 연산
# 덧셈은 연결(concatenate), 곱셈은(여러번 더해짐), 인덱싱과 슬라이싱 가능(다만 특정 인덱스의 값 변경 불가, immutable)
a = "Hello"
b = "World"
print(a + " " + b)

a = "String"
print(a * 3)

a = "ABCDEF"
print(a[2:4])


# < 튜플 자료형 >

# 리스트는 특정 인덱스 접근 가능, 튜플은 한 번 선언된 값 변경 불가
# 리스트는 대괄호[], 튜플은 소괄호() 이용
# 리스트에 비해 튜플은 상대적으로 공간 효율적임(메모리)
a = (1, 2, 3, 4, 5, 6, 7, 8, 9)
print(a[3]) # index 3
print(a[1:4]) # index 1~3

# 튜플을 사용하면 좋은 경우
# '서로 다른 성질'의 데이터를 묶어서 관리할 때: 최단 경로 알고리즘 (비용, 노드 번호)
# 데이터의 나열을 '해싱의 키 값'으로 사용할 때: 튜플은 변경 불가능하기에 리스트와 다르게 키 값으로 사용 가능
# 리스트보도 '메모리를 효율적으로' 사용해야 할 때